{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport CryptoJS from 'crypto-js';\nexport default {\n  name: 'LoginView',\n  components: {},\n  data() {\n    return {\n      key: 'password',\n      successAlert: false,\n      failureAlert: false,\n      successMessage: '',\n      failureMessage: ''\n    };\n  },\n  methods: {\n    login() {\n      const username = this.loginUsername;\n      const password = this.loginPassword;\n      const rememberFlag = this.loginRemember;\n      const encryptedPassword = CryptoJS.AES.encrypt(password, this.key).toString();\n      const data = {\n        user: username,\n        secret: encryptedPassword,\n        remember: rememberFlag\n      };\n      console.log('login data submitted:', data);\n      axios.post('http://127.0.0.1:3000/login', data).then(response => {\n        console.log('received response:', response.data);\n        if (response.data.status === 0) {\n          // console.log('Login Success');\n          this.successMessage = response.data.msg;\n          this.successAlert = true;\n          this.$store.commit('setUser', response.data.user);\n          this.$store.commit('setLoginFlag', true);\n          this.$router.push('/explore');\n        } else if (response.data.status === 1) {\n          // console.log('Login Fail');\n          this.failureMessage = response.data.msg;\n          this.failureAlert = true;\n        }\n      }).catch(error => console.error(error));\n    },\n    signup() {\n      const username = this.signupUsername;\n      const password = this.signupPassword;\n      const passwordRepeat = this.signupPasswordRepeat;\n      if (password !== passwordRepeat) {\n        // this.$toasted.show('Passwords do not match!');\n        this.failureMessage = 'Password not match!';\n        this.failureAlert = true;\n        return;\n      }\n      const encryptedPassword = CryptoJS.AES.encrypt(password, this.key).toString();\n      const data = {\n        user: username,\n        secret: encryptedPassword\n      };\n      console.log('Sign up data submitted:', data);\n      axios.post('http://127.0.0.1:3000/signup', data).then(response => {\n        console.log('received response:', response.data);\n        if (response.data.status === 0) {\n          // console.log('Signup Success');\n          this.successMessage = response.data.msg;\n          this.successAlert = true;\n        } else if (response.data.status === 1) {\n          // console.log('Signup Fail');\n          this.failureMessage = response.data.msg;\n          this.failureAlert = true;\n        }\n      }).catch(error => console.error(error));\n    }\n  }\n};","map":{"version":3,"names":["axios","CryptoJS","name","components","data","key","successAlert","failureAlert","successMessage","failureMessage","methods","login","username","loginUsername","password","loginPassword","rememberFlag","loginRemember","encryptedPassword","AES","encrypt","toString","user","secret","remember","console","log","post","then","response","status","msg","$store","commit","$router","push","catch","error","signup","signupUsername","signupPassword","passwordRepeat","signupPasswordRepeat"],"sources":["src/views/LoginView.vue"],"sourcesContent":["<template>\n  <v-content>\n    <v-form id=\"login-form\">\n      <h2>Login</h2>\n      <v-text-field\n        label=\"Username\"\n        id=\"login-username\"\n        v-model=\"loginUsername\"\n        required\n      ></v-text-field>\n      <v-text-field\n        label=\"Password\"\n        type=\"password\"\n        id=\"login-password\"\n        v-model=\"loginPassword\"\n        required\n      ></v-text-field>\n      <v-checkbox\n        label=\"Remember me\"\n        id=\"login-remember\"\n        v-model=\"loginRemember\"\n      ></v-checkbox>\n      <v-btn type=\"button\" @click=\"login()\">Submit</v-btn>\n    </v-form>\n    <v-form id=\"signup-form\" class=\"my-10\">\n      <h2>Sign Up</h2>\n      <v-text-field\n        label=\"Username\"\n        id=\"signup-username\"\n        v-model=\"signupUsername\"\n        required\n      ></v-text-field>\n      <v-text-field\n        label=\"Password\"\n        type=\"password\"\n        id=\"signup-password\"\n        v-model=\"signupPassword\"\n        required\n      ></v-text-field>\n      <v-text-field\n        label=\"Repeat Password\"\n        type=\"password\"\n        id=\"signup-password-repeat\"\n        v-model=\"signupPasswordRepeat\"\n        required\n      ></v-text-field>\n      <v-btn type=\"button\" @click=\"signup()\">Submit</v-btn>\n    </v-form>\n    <v-alert\n      type=\"success\"\n      v-model=\"successAlert\"\n      dismissible\n    >\n      {{ successMessage }}\n    </v-alert>\n    <v-alert\n      type=\"error\"\n      v-model=\"failureAlert\"\n      dismissible\n    >\n      {{ failureMessage }}\n    </v-alert>\n  </v-content>\n</template>\n\n<script>\nimport axios from 'axios';\nimport CryptoJS from 'crypto-js';\n\nexport default {\n  name: 'LoginView',\n\n  components: {\n  },\n\n  data() {\n    return {\n      key: 'password',\n      successAlert: false,\n      failureAlert: false,\n      successMessage: '',\n      failureMessage: '',\n    };\n  },\n  methods: {\n    login() {\n      const username = this.loginUsername;\n      const password = this.loginPassword;\n      const rememberFlag = this.loginRemember;\n      const encryptedPassword = CryptoJS.AES.encrypt(password, this.key).toString();\n      const data = {\n        user: username,\n        secret: encryptedPassword,\n        remember: rememberFlag,\n      };\n      console.log('login data submitted:', data);\n      axios\n        .post('http://127.0.0.1:3000/login', data)\n        .then((response) => {\n          console.log('received response:', response.data);\n          if (response.data.status === 0) {\n            // console.log('Login Success');\n            this.successMessage = response.data.msg;\n            this.successAlert = true;\n            this.$store.commit('setUser', response.data.user);\n            this.$store.commit('setLoginFlag', true);\n            this.$router.push('/explore');\n          } else if (response.data.status === 1) {\n            // console.log('Login Fail');\n            this.failureMessage = response.data.msg;\n            this.failureAlert = true;\n          }\n        })\n        .catch((error) => console.error(error));\n    },\n    signup() {\n      const username = this.signupUsername;\n      const password = this.signupPassword;\n      const passwordRepeat = this.signupPasswordRepeat;\n      if (password !== passwordRepeat) {\n        // this.$toasted.show('Passwords do not match!');\n        this.failureMessage = 'Password not match!';\n        this.failureAlert = true;\n        return;\n      }\n      const encryptedPassword = CryptoJS.AES.encrypt(password, this.key).toString();\n      const data = {\n        user: username,\n        secret: encryptedPassword,\n      };\n      console.log('Sign up data submitted:', data);\n      axios\n        .post('http://127.0.0.1:3000/signup', data)\n        .then((response) => {\n          console.log('received response:', response.data);\n          if (response.data.status === 0) {\n            // console.log('Signup Success');\n            this.successMessage = response.data.msg;\n            this.successAlert = true;\n          } else if (response.data.status === 1) {\n            // console.log('Signup Fail');\n            this.failureMessage = response.data.msg;\n            this.failureAlert = true;\n          }\n        })\n        .catch((error) => console.error(error));\n    },\n  },\n};\n</script>\n"],"mappings":";AAkEA,OAAAA,KAAA;AACA,OAAAC,QAAA;AAEA;EACAC,IAAA;EAEAC,UAAA,GACA;EAEAC,KAAA;IACA;MACAC,GAAA;MACAC,YAAA;MACAC,YAAA;MACAC,cAAA;MACAC,cAAA;IACA;EACA;EACAC,OAAA;IACAC,MAAA;MACA,MAAAC,QAAA,QAAAC,aAAA;MACA,MAAAC,QAAA,QAAAC,aAAA;MACA,MAAAC,YAAA,QAAAC,aAAA;MACA,MAAAC,iBAAA,GAAAjB,QAAA,CAAAkB,GAAA,CAAAC,OAAA,CAAAN,QAAA,OAAAT,GAAA,EAAAgB,QAAA;MACA,MAAAjB,IAAA;QACAkB,IAAA,EAAAV,QAAA;QACAW,MAAA,EAAAL,iBAAA;QACAM,QAAA,EAAAR;MACA;MACAS,OAAA,CAAAC,GAAA,0BAAAtB,IAAA;MACAJ,KAAA,CACA2B,IAAA,gCAAAvB,IAAA,EACAwB,IAAA,CAAAC,QAAA;QACAJ,OAAA,CAAAC,GAAA,uBAAAG,QAAA,CAAAzB,IAAA;QACA,IAAAyB,QAAA,CAAAzB,IAAA,CAAA0B,MAAA;UACA;UACA,KAAAtB,cAAA,GAAAqB,QAAA,CAAAzB,IAAA,CAAA2B,GAAA;UACA,KAAAzB,YAAA;UACA,KAAA0B,MAAA,CAAAC,MAAA,YAAAJ,QAAA,CAAAzB,IAAA,CAAAkB,IAAA;UACA,KAAAU,MAAA,CAAAC,MAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA,WAAAN,QAAA,CAAAzB,IAAA,CAAA0B,MAAA;UACA;UACA,KAAArB,cAAA,GAAAoB,QAAA,CAAAzB,IAAA,CAAA2B,GAAA;UACA,KAAAxB,YAAA;QACA;MACA,GACA6B,KAAA,CAAAC,KAAA,IAAAZ,OAAA,CAAAY,KAAA,CAAAA,KAAA;IACA;IACAC,OAAA;MACA,MAAA1B,QAAA,QAAA2B,cAAA;MACA,MAAAzB,QAAA,QAAA0B,cAAA;MACA,MAAAC,cAAA,QAAAC,oBAAA;MACA,IAAA5B,QAAA,KAAA2B,cAAA;QACA;QACA,KAAAhC,cAAA;QACA,KAAAF,YAAA;QACA;MACA;MACA,MAAAW,iBAAA,GAAAjB,QAAA,CAAAkB,GAAA,CAAAC,OAAA,CAAAN,QAAA,OAAAT,GAAA,EAAAgB,QAAA;MACA,MAAAjB,IAAA;QACAkB,IAAA,EAAAV,QAAA;QACAW,MAAA,EAAAL;MACA;MACAO,OAAA,CAAAC,GAAA,4BAAAtB,IAAA;MACAJ,KAAA,CACA2B,IAAA,iCAAAvB,IAAA,EACAwB,IAAA,CAAAC,QAAA;QACAJ,OAAA,CAAAC,GAAA,uBAAAG,QAAA,CAAAzB,IAAA;QACA,IAAAyB,QAAA,CAAAzB,IAAA,CAAA0B,MAAA;UACA;UACA,KAAAtB,cAAA,GAAAqB,QAAA,CAAAzB,IAAA,CAAA2B,GAAA;UACA,KAAAzB,YAAA;QACA,WAAAuB,QAAA,CAAAzB,IAAA,CAAA0B,MAAA;UACA;UACA,KAAArB,cAAA,GAAAoB,QAAA,CAAAzB,IAAA,CAAA2B,GAAA;UACA,KAAAxB,YAAA;QACA;MACA,GACA6B,KAAA,CAAAC,KAAA,IAAAZ,OAAA,CAAAY,KAAA,CAAAA,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}